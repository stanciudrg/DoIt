/* Font style declarations */

@font-face {
    font-family: 'WorkSans';
    src: url('./fonts/WorkSans-Regular.woff');
    font-weight: 400;
    font-style: normal;
    unicode-range: U+000-5FF;
    font-display: swap;
}

@font-face {
    font-family: 'WorkSans';
    src: url('./fonts/WorkSans-Italic.woff');
    font-weight: 400;
    font-style: italic;
    unicode-range: U+000-5FF;
    font-display: swap;
}

@font-face {
    font-family: 'WorkSans';
    src: url('./fonts/WorkSans-Medium.woff');
    font-weight: 500;
    font-style: normal;
    unicode-range: U+000-5FF;
    font-display: swap;
}

@font-face {
    font-family: 'WorkSans';
    src: url('./fonts/WorkSans-MediumItalic.woff');
    font-weight: 500;
    font-style: italic;
    unicode-range: U+000-5FF;
    font-display: swap;
}

@font-face {
    font-family: 'WorkSans';
    src: url('./fonts/WorkSans-SemiBold.woff');
    font-weight: 600;
    font-style: normal;
    unicode-range: U+000-5FF;
    font-display: swap;
}

@font-face {
    font-family: 'WorkSans';
    src: url('./fonts/WorkSans-SemiBoldItalic.woff');
    font-weight: 600;
    font-style: italic;
    unicode-range: U+000-5FF;
    font-display: swap;
}

* {
    /* Prefer system fonts as fallback if 'WorkSans' is not available */
    font-family: 'WorkSans', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    /* Variable declarations */
    --font-color: rgb(29, 29, 31);
    --hover-font-color: rgb(0, 0, 0);
    --primary-color: rgb(255, 255, 255);
    --accent-color: rgb(29, 101, 209);
    --hover-color: rgb(245, 245, 247);
    --dark-hover-color: rgb(240, 240, 242);
    --transparent-black: rgba(29, 29, 31, 0.5);
    --danger-color: #D11A2A;
    --safe-color: #1c8d12;
    --big-border-radius: 0.5rem;
    --medium-border-radius: 0.25rem;
    --tiny-border-radius: 0.125rem;
    --transition-duration: 200ms;
    --transition-timing-function: cubic-bezier(0.22, 1, 0.36, 1);
}

/* Mini CSS reset */

*,
*::after,
*::before {
    box-sizing: border-box;
    /* Disables the colored highlight that is supposed to appear over a link while it's being 
    tapped but also appears over button elements on mobile devices */
    -webkit-tap-highlight-color: transparent;
    margin: 0;
    padding: 0;
}

/* General declarations */

body,
button,
textarea,
input {
    color: var(--font-color);
}

h2 {
    font-size: 1.1rem;
    font-weight: 500;
    margin: 0;
}

ul {
    list-style-type: none;
    padding: 0;
}

svg {
    width: 26px;
    /*Prevents sending click events to the event listeners attached to button element ancestors.*/
    pointer-events: none;
    touch-action: none;
}

button {
    /* Disable default button styling */
    appearance: none;
    text-align: left;
    background-color: transparent;
    border: 0;
    cursor: pointer;
    transition-property: background-color, color;
    transition-duration: var(--transition-duration);
    transition-timing-function: var(--transition-timing-function);
}

/* Class added whenever the button is a .settings-button and a respective .settings-list is visible.
Keeps the button in a simulated 'focus' state as long as the .settings-list it generated is visible, to create
the appearance of a 'hover' effect on mobile devices */
button.focused {
    background-color: var(--hover-color);
    color: var(--hover-font-color);
}

/* Only apply hover effects if the device has hover capabilities */
@media (hover: hover) {

    button:hover {
        background-color: var(--hover-color);
        color: var(--hover-font-color);
    }

}

/* Class for buttons that contain a name either directly or within a child span element (see bellow) */
.named-button {
    border-radius: var(--medium-border-radius);
}

/* Named buttons that contain more information than their name, that is split in multiple span
elements. These types of buttons are the category navigational buttons (devCategories and userCategories as in JS)  */
.named-button .button-name {
    padding: 4px 6px;
    width: 100%;
}

.named-button .icon {
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Class for buttons that contain a SVG only */
.icon-button {
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: var(--tiny-border-radius);
}

/* The containers that hold the .settings-button (button) and the .settings-list (ul) separated
from each other to prevent accessibility errors when trying to nest a ul element within a button element */
.settings-container,
.customize-settings-container {
    position: relative;
}

/* Icon only button holding a SVG made of three vertical dots.
Used for all buttons that represent the action of opening a settings list, apart from the filter and sort setting buttons
that have their own icons */
.settings-button {
    padding: 2px;
}

.settings-button svg {
    width: 22px;
}

/* Ul elements containing the available settings for a a specific feature.
They simulate a context menu and are positioned relative to their container while
floating over the rest of the webpage */
.settings-list,
.dropdown-list-container {
    z-index: 2;
    position: absolute;
    top: 28px;
    right: 0;
    overflow: hidden;
    white-space: nowrap;
    list-style-type: none;
    font-size: 0.9rem;
    background-color: var(--primary-color);
    border-radius: var(--medium-border-radius);
}

.settings-list,
.dropdown-list-container,
.categories-dropdown {
    box-shadow: 0 0 10px 0 rgba(29, 29, 31, 0.2);
    outline: 2px solid rgba(29, 29, 31, 0.04);
}

/* Class added by JS whenever the .settings-list is being rendered outside of the viewport*/
.settings-list.top-positioned {
    top: -68px;
}

/* The setting items within a settings list. Dynamically created by JS based on their call location */
.settings-list .named-button,
.dropdown-list .named-button {
    display: flex;
    width: 100%;
    align-items: center;
    padding: 0.5rem 0.75rem 0.5rem 0.5rem;
    border-radius: 0;
}

/* The main todo item that is being rendered inside the todos list,
and the anchor todo item that is being rendered inside the search results list
whenever the user searches for a todo. The anchor todo item is an actual anchor element (<a>),
and is a more simplistic version of the todo item, containing only the title and whether
it is completed or not */
.todo-item,
.anchor-todo-item {
    border-radius: var(--medium-border-radius);
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer;
}

.todo-item .todo-title,
.anchor-todo-item .todo-title {
    grid-column: 2 / 3;
    /* Prevents text overflowing by dynamically shortening the text and adding an ellipsis.
    This is necessary since the maxlength of the title input is 500 characters and the todo item
    changes its size according to the viewport */
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 4;
    overflow: hidden;
    overflow-wrap: break-word;
    word-break: break-word;
    font-size: 1.1rem;
    font-weight: 500;
    margin-right: 8px;
}

/* Adds a line-through the todo title whenever the 'completed' checkbox on the todo item is checked */
.anchor-todo-item.completed .todo-title,
.todo-item.completed .todo-title {
    text-decoration: line-through;
}

/* Keeps the color of the 'Delete' setting within any settings list to var(--danger-color) */
.settings-list .named-button.delete,
.settings-list .named-button.delete:hover {
    color: var(--danger-color);
}

/* Hides the input element to create a custom checkbox for changing the status of the todo item
and for selecting whether deleting a category should also delete its containing todos */
.todo-completed-status input,
.delete-todos-checkbox input {
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 0;
    cursor: pointer;
    opacity: 0;
}

/* The three types of content that are being rendered into the #modal container.
The form element is used for the Add and Edit Todo and Add Category modals,
the #search-container is a div and is used for the Search modal, and the .delete-modal
is used for the Delete Todo and Delete Category modals */
form,
#search-container,
.delete-modal {
    position: absolute;
    top: 15vh;
    background-color: var(--primary-color);
    box-shadow: 0px 0px 50px 0px rgba(29, 29, 31, 0.3);
    border-radius: var(--big-border-radius);
}

form,
.delete-modal {
    display: grid;
    max-width: 350px;
    width: 100%;
    padding: 1rem;
    gap: 1rem;
}

.input-container textarea,
.input-container input {
    width: 100%;
    border: 0;
}

.input-container input {
    padding: 6px;
}

input {
    appearance: none;
}

input::placeholder,
textarea::placeholder {
    color: var(--transparent-black);
    opacity: 1;
}

.priority-container label,
.input-container.due-date input,
.input-container.category {
    transition-property: background-color;
    transition-duration: var(--transition-duration);
    transition-timing-function: var(--transition-timing-function);
}

/* Adds the 'focus' styling back to the label and span elements as a result of
hiding their respective input elements from view when creating custom inputs */
.priority-container input:focus-visible+label,
.delete-todos-checkbox input:focus-visible+span {
    outline: 4px auto Highlight;
    outline: 4px auto -webkit-focus-ring-color;
    border-radius: 0;
}

/* Changes the default 'focus' styling */
.clear-date:focus-visible,
.clear-category:focus-visible,
.categories-dropdown-button.focused,
.categories-dropdown-button.focused:hover,
.categories-dropdown-button:focus,
.categories-dropdown-button:focus:hover,
#todo-due-date:focus,
#todo-due-date.focused {
    background-color: var(--dark-hover-color);
    outline: none;
}

/* Custom scrollbars for webkit browsers */
nav::-webkit-scrollbar,
.text-areas-container::-webkit-scrollbar,
.categories-dropdown-list::-webkit-scrollbar,
#search-results-list::-webkit-scrollbar {
    width: 7px;
    background: var(--dark-hover-color);
}

nav::-webkit-scrollbar-thumb,
.text-areas-container::-webkit-scrollbar-thumb,
.categories-dropdown-list::-webkit-scrollbar-thumb,
#search-results-list::-webkit-scrollbar-thumb {
    background: rgba(29, 29, 31, 0.2);
}

nav::-webkit-scrollbar-thumb:hover,
.text-areas-container::-webkit-scrollbar-thumb:hover,
.categories-dropdown-list::-webkit-scrollbar-thumb:hover,
#search-results-list::-webkit-scrollbar-thumb:hover {
    background: rgba(29, 29, 31, 0.3);
}

/* Hide fieldset legend for sighted users but allow the element to still be recognized by screen readers */
form>fieldset>legend,
#search-container label,
fieldset .input-container label,
.content-header label,
.priorities-legend,
#user-nav-list button .input-container label {
    position: absolute;
    left: -9999px;
    overflow: hidden;
}

/* -------------------------------- */

html {
    scroll-behavior: smooth;
}

/* Class added whenever a modal or the header in mobile mode is open to temporarily disable scrolling */
html.overlay-over {
    overflow: hidden;
    touch-action: none;
}

body {
    display: grid;
    grid-template-columns: 275px auto;
    background-image: linear-gradient(to left, #ffffff, #fdfdfd, #fbfbfb, #f9f9fa, #f7f7f8);
    transition: grid-template-columns 600ms;
    transition-timing-function: var(--transition-timing-function);
}

/* Main header */

/* Compensate for the loss of width for the first grid-template-column due to the fact
that the header has been hidden and thus has shrink its size */
body.header-hidden {
    grid-template-columns: 59px auto;
}

/* Class added in the mobile version of the app. Invisible by default, is made visible
when the header is being open to add a grey background above the body. */
body .header-overlay {
    z-index: 2;
    display: none;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: var(--font-color);
    opacity: 0;
    touch-action: none;
    transition: 400ms;
}

body .header-overlay.visible {
    opacity: 0.2;
}

body>header {
    z-index: 3;
    grid-column: 1 / 2;
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    width: 275px;
    height: 95%;
    flex-direction: column;
    display: flex;
    overflow-x: hidden;
    background-color: var(--primary-color);
    margin: auto;
    gap: 0.5rem;
    box-shadow: 0 0 20px 0px rgba(29, 29, 31, 0.1);
    border-top-right-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
    transition: box-shadow, height, transform;
    transition-timing-function: var(--transition-timing-function);
    transition-duration: 600ms;
}

/* Partially hide the header */
body>header.hidden {
    transform: translateX(-217px);
}

/* The top side of the main header, contains the app title and the menu toggler */
#header-top-side {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-right: 0.75rem;
    padding-top: 0.5rem;
}

#header-top-side .icon-button {
    padding: 4px;
}

/* Mirrors the SVG to always indicate the direction towards which the header
will grow or shrink  */
#header-top-side .icon-button.selected {
    transform: scaleX(-1);
}

@media(hover:hover) {

    #header-top-side .icon-button:hover {
        color: var(--primary-color);
        background-color: var(--accent-color);
    }

}

#header-top-side h1 {
    font-size: 1.3rem;
    font-weight: 600;
    margin: 0.5rem 0 0.5rem 0.75rem;
}

nav {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    padding-right: 0.75rem;
    padding-bottom: 0.75rem;
    transition: opacity 200ms;
    transition-timing-function: var(--transition-timing-function);
}

body>header.hidden nav {
    opacity: 0;
}

/* Container that holds default categories and the 'Add todo' and 'Search' buttons */
#dev-nav {
    padding-bottom: 2rem;
}

/* Container that holds the following:
 - a title,
 - the current number of user categories,
 - a button to add a new category
 - a button to toggle the visibility of user categories  */
#user-nav {
    position: relative;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

#user-nav-header {
    display: grid;
    grid-template-columns: 1fr repeat(3, auto);
    align-items: center;
    gap: 0.5rem;
    padding-bottom: 0.5rem;
}

#user-nav-title {
    grid-column: 1 / 2;
    margin-left: 1rem;
}

#categories-counter {
    grid-column: 2 / 3;
    display: flex;
    width: 26px;
    height: 26px;
    justify-content: center;
    align-items: center;
    font-size: 1.2rem;
    font-weight: 600;
}

#user-nav .add-button {
    grid-column: 3 / 4;
}

#user-nav .expand-button {
    grid-column: 4 / 5;
    transform: rotate(180deg);
}

#user-nav .expand-button.expanded {
    transform: rotateX(0);
}

/* The list items that contain the navigational buttons for changing the currently displayed category content.
#dev-nav-list contains developer generated categories ('All todos', 'Today', and 'Next 7 days').
#user-nav-list contains user generated categories, which are structured differently and are dynamic */
#dev-nav-list,
#user-nav-list {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

#dev-nav-list>li,
#user-nav-list>li {
    cursor: pointer;
    border-top-right-radius: var(--medium-border-radius);
    border-bottom-right-radius: var(--medium-border-radius);
    transition-property: background-color, color;
    transition-duration: var(--transition-duration);
    transition-timing-function: var(--transition-timing-function);
}

#dev-nav-list>li:hover,
#user-nav-list>li:hover {
    background-color: var(--hover-color);
}

/* Class added to make the current category button stand out from the rest of the buttons */
#dev-nav-list>li.selected,
#user-nav-list>li.selected {
    background-color: var(--accent-color);
    color: var(--primary-color)
}

#dev-nav-list>li.selected:hover,
#user-nav-list>li.selected:hover {
    background-color: var(--accent-color);
}

#dev-nav-list>li>button,
#user-nav-list>li>button {
    display: grid;
    width: 100%;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    color: inherit;
    gap: 0.75rem;
    border: 0;
    cursor: pointer;
    /* Disable the transition effect declared on all buttons to allow the transition effects
    added on the li item to take over */
    transition: none;
    transition-duration: none;
    transition-timing-function: none;
    background-color: inherit;
}

#dev-nav-list>li>button {
    padding: 0.5rem 0.75rem 0.5rem 1rem;
}

#user-nav-list>li>button {
    padding: 0.5rem 0 0.5rem 1rem;
}

#dev-nav-list>li>button:hover,
#user-nav-list>li>button:hover {
    background-color: inherit;
    color: inherit;
}

/* Targets all .named-buttons from #dev-nav-list and #user-nav-list */
nav .named-button .icon {
    display: flex;
    justify-content: center;
    align-items: center;
}

nav .named-button .button-name {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* Input that is being rendered in place of .button-name and allows the user to change the name of the
user category */
#user-nav-list>li>button .input-container input {
    width: 100%;
    padding: 4px 6px;
    border: 0;
    border-radius: var(--tiny-border-radius);
    outline: 1px solid var(--transparent-black)
}

/* Animation added specifically for #user-nav-list, which can be hidden by the user */
#user-nav-list {
    animation-name: toggle-on;
    animation-duration: 300ms;
}

#user-nav-list.hidden {
    animation-name: toggle-off;
    animation-duration: 300ms;
}

/* The #user-nav-list list item is designed differently since it contains a dynamic category that can
be deleted and renamed, thus an additional buttons needs to be added to allow such features (.settings-button) */
#user-nav-list>li {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

#user-nav-list>li .settings-button {
    margin-right: 0.5rem;
    margin-left: 0.25rem;
}

#user-nav-list>li.selected .settings-button {
    color: var(--primary-color);
}

#user-nav-list>li .settings-button.focused {
    background-color: var(--accent-color);
    color: var(--primary-color);
}

#user-nav-list>li.selected .settings-button.focused {
    background-color: var(--primary-color);
    color: var(--accent-color);
}

@media (hover:hover) {

    #user-nav-list>li .settings-button:hover {
        background-color: var(--accent-color);
        color: var(--primary-color);
    }

    #user-nav-list>li.selected .settings-button:hover {
        background-color: var(--primary-color);
        color: var(--accent-color);
    }

}

/* App content (visual representation of each developer category and user category) */

main {
    grid-column: 2 / 3;
    display: flex;
    flex-direction: column;
    align-items: center;
    padding-bottom: 6rem;
}

/* Keeps the header of the main content visible when users scrolls the todos list */
.content-header-container {
    z-index: 2;
    position: sticky;
    top: 0;
    left: 0;
    max-width: 800px;
    width: 100%;
    padding: 0 2rem;
    background-image: linear-gradient(to right, #fafafa, #fbfbfb, #fcfcfc, #fcfcfc, #fdfdfd);
}

/* Contains the title of the current content being displayed, the sort and filter .settingsButtons, and
an additional .settings-button that is added only when the content being displayed is the content of a user category.
The additional .settings-button allows the user to rename and delete the category */
.content-header {
    display: grid;
    grid-template-columns: 1fr repeat(2, auto);
    align-items: center;
    padding-top: 1.75rem;
    padding-bottom: 0.5rem;
    gap: 0.5rem;
    border-bottom: 1px solid rgba(29, 29, 31, 0.2);
}

.content-title {
    grid-column: 1 / 2;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* .content-title gets replaced with .input-container to allow the user to rename the title of the user category
that is being rendered */
.content-title,
.content-header .input-container input {
    font-size: 1.1rem;
    font-weight: 500;
    padding: 4px 4px;
}

.content-header .input-container.name input {
    outline: 1px solid var(--transparent-black);
    border: 0;
    border-radius: var(--tiny-border-radius);
}

/* Container that holds the two static .settingButtons (sort and filter) and the dynamic
.settings-button that is manually created for user categories only */
.content-settings {
    grid-column: 3 / 4;
    display: flex;
    gap: 0.5rem;
}

/* Class added whenever the button is a .settings-button and a respective .settings-list is visible.
Keeps the button in a simulated 'focus' state as long as the .settings-list it generated is visible, to create
the appearance of a 'hover' effect on mobile devices */
.content-settings>button.focused {
    background-color: var(--dark-hover-color);
}

@media (hover: hover) {

    .content-settings>button:hover {
        background-color: var(--dark-hover-color);
    }


}

/* Class used to let the user know whether a sorting or filtering method is being applied
to the current content */
.content-settings button.sortingOn,
.content-settings button.filterOn {
    color: var(--accent-color);
}

.content-settings .settings-container,
.content-settings .customize-settings-container {
    position: relative;
}

.content-settings .settings-button {
    padding: 0;
}

.content-settings .settings-button svg {
    width: 26px;
}


.content-settings .dropdown-list-container,
.content-settings .settings-list {
    top: 30px;
}

/* Class added to the settingItem that represents the currently applied sorting or filtering method */
.dropdown-list button.selected,
.dropdown-list button.selected:hover {
    color: var(--accent-color);
}

/* The title of the dropdown-list, which is 'Sort by' in case of sorting and 'Filter' in case of filtering */
.dropdown-list-title {
    font-weight: 400;
    color: var(--transparent-black);
    padding: 0.5rem 0.75rem 0.5rem 0.5rem;
}

/* Container for the .todos-list unordered list and the 'Add a new todo' button */
.content {
    max-width: 800px;
    width: 100%;
    display: grid;
    grid-template-rows: 1fr auto;
    padding: 0 2rem;
}

/* The unordered list where the todo items are dynamically rendered, moved, or deleted */
.todos-list {
    grid-row: 1 / 2;
    display: flex;
    flex-direction: column;
    list-style-type: none;
    margin-top: 1rem;
    gap: 1rem;
}

/* Prevent the todos list from taking any space when it does not contain any todo */
.todos-list:empty {
    margin-top: 0;
}

.todo-item {
    position: relative;
    min-width: 330px;
    display: grid;
    /* The 0fr value is for the todoAdditionalInfo container, that is dynamically added
    whenever the user expands the todo item and deleted when the user shrinks it.
    Setting the fr value to 0 and then setting it to 1fr in a keyframe with an animation duration
    creates a smooth transition from one state to the other (from default state to expanded and vice-versa) */
    grid-template-rows: auto 0fr auto;
    background-color: var(--primary-color);
    box-shadow: 0 5px 10px 0 rgba(29, 29, 31, 0.04);
    border: 1px solid rgba(29, 29, 31, 0.2);
    transition: background-color, color, border, box-shadow;
    transition-timing-function: var(--transition-timing-function);
    transition-duration: var(--transition-duration);
    animation: shrink-todo;
    animation-timing-function: var(--transition-timing-function);
    animation-duration: 300ms;
    animation-fill-mode: forwards;
}

/* Class added whenever the user clicks the 'Expand todo' button while the Todo is in its default state (shrunk) */
.todo-item.expanded {
    animation: expand-todo;
    animation-timing-function: var(--transition-timing-function);
    animation-duration: 300ms;
    animation-fill-mode: forwards;
}

/* Class added after the user clicks an anchor todo and JS sends the user
to the respective todo item. */
.todo-item.highlighted {
    outline: 2px solid var(--accent-color);
}

/* Class added to todos that are currently being filtered out by the filtering method set on the category */
.todo-item.filteredOut {
    opacity: 0.3;
    pointer-events: none;
    touch-action: none;
}

/* Takes into account the content-header-container that has its position set to 'sticky' when
JS uses the .focus() method on the todo-item */
.todo-item:focus {
    scroll-margin-top: 100px;
}

.todo-item:hover {
    box-shadow: 0 0 10px 1px rgba(29, 29, 31, 0.08);
}

/* .todo-info contains the always visible information about the todo, namely its
completed status, title, mini due date (a human readable version of the due date) and
the .settings-button that allows the user to edit and delete the todo */
.todo-item .todo-info {
    grid-row: 1 / 2;
    display: grid;
    grid-template-columns: auto 1fr repeat(2, auto);
    align-items: start;
    padding: 0.5rem;
    gap: 8px;
}

/* Custom checkbox for changing the completion status of the todo */
.todo-completed-status {
    font-size: 0;
    color: transparent;
    grid-column: 1 / 2;
    position: relative;
    display: flex;
    width: 20px;
    height: 20px;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    margin-top: 2px;
}

.todo-completed-status span {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    border: 2px solid var(--font-color);
    border-radius: 100%;
    padding: 2px;
}

/* Changes the color of the checkbox to reflect the current priority of the todo */
.todo-completed-status span.priority-1 {
    border-color: rgb(213, 59, 59);
}

.todo-completed-status span.priority-2 {
    border-color: rgb(228, 132, 7);
}

.todo-completed-status span.priority-3 {
    border-color: rgb(127, 80, 189);
}

/* Adds a custom icon into the custom checkbox when in :checked state */
.todo-completed-status input:checked+span {
    background-image: url("./img/checkmark.svg");
    background-size: cover;
}

/* Adds keyboard focus only styling for the span element that takes the place of the
hidden checkbox input */
.todo-completed-status input:focus-visible+span {
    background-color: rgba(29, 29, 31, 0.1);
}

.todo-item .todo-title {
    margin-top: 2px;
}

.todo-mini-due-date {
    grid-column: 3 / 4;
    color: var(--safe-color);
    margin-top: 2px;
}

.todo-item.overdue .todo-mini-due-date {
    color: var(--danger-color);
}

.todo-info .settings-container {
    grid-column: 4 / 5;
}

/* The additional info of the todo, that contains its description (if any), priority (if any), due date (if any),
and category (if any) */
.todo-additional-info {
    grid-row: 2 / span 3;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, auto);
    overflow: hidden;
    padding: 0 0.5rem;
    column-gap: 0.5rem;
}

.todo-description {
    grid-column: 1 / 4;
    grid-row: 1 / 2;
    /* Prevents text overflowing by dynamically shortening the text and adding an ellipsis.
    This is necessary since the maxlength of the description input is 500 characters and the todo item
    changes its size according to the viewport */
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 4;
    overflow: hidden;
    overflow-wrap: break-word;
    word-break: break-word;
    padding: 0 0.30rem;
    margin-top: 0.35rem;
    margin-bottom: 0.75rem;
}

/* The containers that hold each priority type, the due date, and category.
Each container has two elements: one holding the static title ('Priority', 'Due date', and 'Category'),
and one containing the respective dynamic value ('1', '05/11/1337') */
.todo-priority-1,
.todo-priority-2,
.todo-priority-3,
.todo-due-date,
.todo-category {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-image: linear-gradient(to top left, #ffffff, #fdfdfd, #fbfbfb, #f9f9fa, #f7f7f8);
    padding: 0.5rem;
    margin-top: 0.5rem;
    margin-bottom: 0.7rem;
    gap: 0.75rem;
    border: 1px solid rgba(29, 29, 31, 0.08);
    border-radius: var(--medium-border-radius);
}

.info-holder-title {
    font-weight: 500;
}

.todo-priority-1,
.todo-priority-2,
.todo-priority-3 {
    gap: 0.585rem;
}

.todo-priority-1 .info-holder-value,
.todo-priority-2 .info-holder-value,
.todo-priority-3 .info-holder-value {
    display: flex;
    width: 22px;
    height: 22px;
    justify-content: center;
    align-items: center;
    color: var(--primary-color);
    border-radius: 100px;
}

/* Match the priority value with the priority color */
.todo-priority-1 .info-holder-value {
    background-color: rgb(213, 59, 59);
}

.todo-priority-2 .info-holder-value {
    background-color: rgb(228, 132, 7);
}

.todo-priority-3 .info-holder-value {
    background-color: rgb(127, 80, 189);
}

.todo-due-date .info-holder-value {
    color: var(--safe-color);
}

.todo-item.overdue .todo-due-date .info-holder-value {
    color: var(--danger-color);
}

.todo-category .info-holder-value {
    width: 100%;
    text-align: center;
    /* Prevents text overflowing by adding an ellipsis. This is necessary since the todo item
    changes its size according to the viewport */
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* The button that expands and shrinks the todo item on user input */
.todo-item .expand-button {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 4px 0;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
    border-bottom-left-radius: var(--medium-border-radius);
    border-bottom-right-radius: var(--medium-border-radius);
}

/* Rotate the button according to the state of the todo item (expanded or not expanded) */
.todo-item.expanded .expand-button svg {
    transform: rotate(180deg);
}

/* The 'Add a new todo' icon only button that is located at the end of each todos list */
.content .add-button {
    grid-row: 3 / 4;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: var(--accent-color);
    color: var(--primary-color);
    padding: 4px 0;
    margin-top: 1rem;
    border-radius: var(--medium-border-radius)
}

.content .add-button:active {
    transform: translateY(2px);
}

/* The footer section, empty for now. Will be updated in the future */
footer {
    grid-column: 2 / 3;
    grid-row: 2 / 3;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
}

/* Modals (Add todo, Edit todo, Add category, Search todos, Delete todo, Delete category)
Largely responsible for collecting user input */

/* The modal into which the following elements are being rendered:
 - Add and edit todo form
 - Add category form
 - Search todos container
 - Delete todo and delete category containers
 Hidden by default */
#modal {
    z-index: 5;
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    display: none;
    justify-content: center;
    border: 0;
}

#modal.show {
    display: flex;
    animation-name: open-modal;
    animation-fill-mode: forwards;
    animation-duration: 300ms;
    animation-timing-function: var(--transition-timing-function);
}

/* Grey overlay that is being shown behind the modal and covers the entire viewport */
#modal::before {
    content: "";
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    background-color: var(--font-color);
}

#modal.show::before {
    /* Ensures that the grey overlay covers the entire viewport even when the modal
    has not completely entered the viewport. This happens when transitioning from the default 
    hidden state to the visible state (from a negative transform: translateY() property) */
    height: calc(100% + 100px);
    animation-name: show-overlay;
    animation-fill-mode: forwards;
    animation-duration: 600ms;
    animation-timing-function: var(--transition-timing-function);
}

/* An additional form overlay that is being added over the #modal whenever the user
opens the custom category select input dropdown or the custom date picker dropdown, to ensure that
clicking outside to close the dropdowns is not closing the modal as well */
.form-overlay {
    z-index: 5;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: none;
}

.form-overlay.visible {
    display: block;
}

fieldset {
    display: flex;
    flex-direction: column;
    margin: 0;
    padding: 0;
    gap: 1rem;
    border: 0;
}

/* Contains the autogrowing title and description textareas, and has a fixed height
to prevent the fixed positioned form element from leaking outside the viewport */
.text-areas-container {
    max-height: 325px;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    scrollbar-gutter: stable;
    gap: 1rem;
}

.input-container textarea {
    display: block;
    /* Properties which combined with JS turn the textareas into autogrowing elements */
    overflow: hidden;
    resize: none;
    white-space: break-spaces;
    padding-right: 8px;
}

.input-container.title textarea {
    font-size: 1.1rem;
    font-weight: 500;
}

.input-container textarea:focus {
    outline: 0;
}

/* A fieldset that contains three custom priority checkboxes (priority 1, priority 2, and priority 3) */
.priorities-fieldset {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0;
    border: 1px solid rgba(29, 29, 31, 0.4);
    border-radius: var(--medium-border-radius);
}

.priority-container:first-of-type {
    color: rgb(177, 49, 49);
    border-right: 1px solid rgba(29, 29, 31, 0.4);
    border-top-left-radius: var(--medium-border-radius);
    border-bottom-left-radius: var(--medium-border-radius)
}

.priority-container:nth-of-type(2) {
    color: rgb(193, 112, 5);
    border-right: 1px solid rgba(29, 29, 31, 0.4);
}

.priority-container:last-of-type {
    color: rgb(96, 61, 142);
    border-top-right-radius: var(--medium-border-radius);
    border-bottom-right-radius: var(--medium-border-radius);
}

/* Custom checkbox */
.priority-container label {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 6px;
    border-radius: inherit;
    cursor: pointer;
}

.priority-container input {
    position: absolute;
    opacity: 0;
}

.priority-container input:checked+label {
    background-color: var(--dark-hover-color);
}

/* The due date and category custom inputs contain a 'Clear' button that allows
for the user to clear the selected due date or selected category */
.input-container.due-date,
.input-container.category {
    display: grid;
    grid-template-columns: 1fr auto;
    border: 1px solid rgba(29, 29, 31, 0.4);
    border-radius: var(--medium-border-radius);
}

.clear-date,
.clear-category {
    fill: var(--transparent-black);
    border-radius: 0;
    border-top-right-radius: var(--medium-border-radius);
    border-bottom-right-radius: var(--medium-border-radius);
    padding: 0 2px;
}

@media(hover:hover) {

    .clear-date:hover,
    .clear-category:hover {
        background-color: transparent;
        fill: var(--danger-color);
    }

}

.clear-date:focus-visible,
.clear-category:focus-visible {
    fill: var(--danger-color);
}

.clear-date:focus-visible:hover,
.clear-category:focus-visible:hover {
    background-color: var(--dark-hover-color);
}

/* The container of the custom date picker imported from a JavaScript library (see Renderer.js component documentation for more info) */
.flatpickr-wrapper {
    width: 100%;
}

.input-container.due-date input,
.categories-dropdown-button {
    border-radius: 0;
    border-top-left-radius: var(--medium-border-radius);
    border-bottom-left-radius: var(--medium-border-radius);
}

/* Change the positioning of the fixed height date picker whenever its content is leaking outside
the viewport. The !important statements are needed to override the default styling of the date picker */
.flatpickr-calendar.static {
    top: calc(100% + 6px) !important;
}

.flatpickr-calendar.static.top-positioned {
    top: -304px !important;
}

.flatpickr-calendar.static.center-positioned {
    top: calc(85% - 165px) !important;
    left: 150px !important;
}

.input-container.category {
    position: relative;
}

/* The button that acts as a custom 'select' input.
When clicked, it renders a dropdown list that contains all user categories and allows
for the user to select one of the categories. */
.categories-dropdown-button {
    /* Prevents the name of the category from overflowing the button */
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    padding: 6px;
}

.categories-dropdown-button:hover {
    background-color: transparent;
}

/* Remove the default styling of the :disabled state of the category select button,
since the button is being manually disabled by JS to limit the interaction with other elements
while the categories dropdown list is open, but styling the button differently when this happens
is unnecessary in this scenario */
.categories-dropdown-button:disabled {
    opacity: 1;
    color: inherit;
}

/* When no category is selected, the category select button has its textContent set to 'Category'.
Changing the color of the 'Category' textContent into transparent black copies what a placeholder
would look like in a similar scenario */
.categories-dropdown-button.empty {
    color: var(--transparent-black);
}

/* The dropdown that contains the dynamic title that can be either 'Pick a category' or 'No categories created',
and the dropdown list that is only rendered if it contains any categories */
.categories-dropdown {
    z-index: 6;
    position: absolute;
    top: 37px;
    left: 0;
    display: none;
    width: 100%;
    overflow: hidden;
    background-color: var(--primary-color);
    border-radius: var(--medium-border-radius);
}

.categories-dropdown.visible {
    display: initial;
    animation-name: open-dropdown;
    animation-duration: 0.3s;
    animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
    animation-fill-mode: forwards;
}

/* Change the positioning of the categories-dropdown whenever 
its content is leaking outside the viewport. */
.categories-dropdown.top-positioned {
    top: -239px;
}

.categories-dropdown.center-positioned {
    top: calc(85% - 165px) !important;
    left: 150px !important;
}

.categories-dropdown-title {
    font-weight: 400;
    color: var(--transparent-black);
    padding: 8px;
}

/* The categories dropdown title is allowed to be focused in case there are no user categories,
to focus the text that informs the user that no user categories are created, but it is otherwise
un-focusable */
.categories-dropdown-title:focus {
    outline: 0;
    color: var(--font-color);
}

/* If there are more than 5 categories that need to be rendered, turn into a scrollable container
and maintain the current height */
.categories-dropdown-list {
    max-height: calc(39.2px * 5);
    overflow-y: auto;
}

.categories-dropdown-list button {
    position: relative;
    display: flex;
    width: 100%;
    align-items: center;
    padding: 6px 24px 6px 6px;
    gap: 0.25rem;
    border-radius: 0;
}

/* Blue dot that differentiates the selected category from the rest */
.categories-dropdown-list button.selected:after {
    content: '';
    position: absolute;
    right: 10px;
    width: 12px;
    height: 12px;
    background-color: var(--accent-color);
    border-radius: 100%;
}

.categories-dropdown-list button:focus {
    appearance: none;
    background-color: var(--hover-color);
    outline: 0;
}

.categories-dropdown-list button svg {
    width: 22px;
}

/* The only input of the Add category form, that is used to retrieve the name of the new category */
.input-container #category-name {
    border-radius: var(--medium-border-radius);
}

/* Contains the 'Cancel' button and the 'Submit'/'Edit'/'Delete' button*/
.modal-actions {
    display: flex;
    gap: 0.5rem;
}

.modal-actions button {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: 500;
    padding: 0.75rem 0;
}

.modal-actions button:active {
    transform: translateY(2px);
}

/* Change the cursor type and opacity when the button is disabled to better reflect its state */
.modal-actions button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.modal-actions .close-modal {
    background-color: var(--hover-color);
}

.modal-actions .close-modal:hover {
    background-color: var(--dark-hover-color);
}

.modal-actions .submit-modal {
    background-color: var(--accent-color);
    color: var(--primary-color);
}

.modal-actions .confirm-delete-button {
    background-color: var(--danger-color);
    color: var(--primary-color);
}

/* Holds a dynamic text that changes depending on the type of content 
the user wants to delete and its name */
.delete-modal-paragraph {
    overflow: hidden;
    overflow-wrap: break-word;
    word-break: break-word;
}

/* Custom checkbox designed to appear as a toggler similar to the ones present on iOS device,
it is only added if the content type is category and if it contains any todos, since its purpose
is to confirm whether the user wants to also delete the containing todos of the category */
.delete-todos-checkbox {
    position: relative;
    display: grid;
    grid-template-columns: repeat(2, auto);
    align-items: center;
    justify-content: space-between;
    font-size: 0.9rem;
}

.delete-todos-checkbox label {
    font-size: 0;
    color: transparent;
    position: relative;
    width: 44px;
    height: 22px;
    cursor: pointer;
}

.delete-todos-checkbox span {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(29, 29, 31, 0.3);
    border-radius: 50px;
    cursor: pointer;
    transition-property: background-color;
    transition-duration: var(--transition-duration);
    transition-timing-function: var(--transition-timing-function);
}

.delete-todos-checkbox span:before {
    position: absolute;
    content: "";
    height: 14px;
    width: 14px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    border-radius: 50%;
    transition-property: transform;
    transition-duration: var(--transition-duration);
    transition-timing-function: var(--transition-timing-function);
}

.delete-todos-checkbox input:checked+span {
    background-color: var(--danger-color);
}

.delete-todos-checkbox input:checked+span::before {
    transform: translateX(22px);
}

/* Contains the search container input and a dynamically rendered results list */
#search-container {
    max-width: 600px;
    width: 90%;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

#search-container input {
    padding: 1rem;
    border-radius: var(--big-border-radius);
    background-color: var(--primary-color);
}

/* Disable default focus styling */
#search-container input:focus {
    outline: 0;
}

/* Unordered list that turns into a scrollable container if its height goes past 60vh */
#search-results-list {
    max-height: 60vh;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    padding: 1rem;
    gap: 0.5rem;
    border-top: 1px solid rgba(29, 29, 31, 0.2);
    border-bottom-right-radius: var(--big-border-radius);
}

/* Do not render the results list if there are no results to be shown */
#search-results-list:empty {
    display: none;
}

/*  The anchor todo item is an actual anchor element (<a>),
and is a more simplistic version of the todo item, containing only the title and whether
it is completed or not */
.anchor-todo-item {
    border: 1px solid rgba(29, 29, 31, 0.3);
    transition-property: background-color, color;
    transition-duration: var(--transition-duration);
    transition-timing-function: var(--transition-timing-function);
}

.anchor-todo-item:hover {
    background-color: var(--hover-color);
}

.anchor-todo-item a {
    touch-action: none;
    pointer-events: none;
    appearance: none;
    color: var(--font-color);
    text-decoration: none;
}

.anchor-todo-item:hover a {
    color: var(--hover-font-color);
}

.anchor-todo-item .todo-info {
    padding: 0.5rem;
}

.anchor-todo-item .todo-title {
    font-size: 1rem;
    font-weight: 400;
}